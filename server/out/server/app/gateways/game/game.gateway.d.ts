import { ClassicModeService } from '@app/services/classic-mode/classic-mode.service';
import { LimitedModeService } from '@app/services/limited-mode/limited-mode.service';
import { PlayersListManagerService } from '@app/services/players-list-manager/players-list-manager.service';
import { RoomsManagerService } from '@app/services/rooms-manager/rooms-manager.service';
import { ChatMessage, ChatMessageGlobal, Coordinate, PlayerData } from '@common/game-interfaces';
import { Logger } from '@nestjs/common';
import { OnGatewayConnection, OnGatewayDisconnect, OnGatewayInit } from '@nestjs/websockets';
import { Socket } from 'socket.io';
export declare class GameGateway implements OnGatewayConnection, OnGatewayDisconnect, OnGatewayInit {
    private readonly logger;
    private readonly classicModeService;
    private readonly playersListManagerService;
    private readonly roomsManagerService;
    private readonly limitedModeService;
    private server;
    private mapSocketWithName;
    constructor(logger: Logger, classicModeService: ClassicModeService, playersListManagerService: PlayersListManagerService, roomsManagerService: RoomsManagerService, limitedModeService: LimitedModeService);
    startGame(socket: Socket): void;
    createSoloRoom(socket: Socket, playerPayLoad: PlayerData): Promise<void>;
    createOneVsOneRoom(socket: Socket, playerPayLoad: PlayerData): Promise<void>;
    createLimitedRoom(socket: Socket, playerPayLoad: PlayerData): Promise<void>;
    startNextGame(socket: Socket): Promise<void>;
    validateCoords(socket: Socket, coords: Coordinate): void;
    checkStatus(socket: Socket): Promise<void>;
    updateRoomOneVsOneAvailability(socket: Socket, gameId: string): void;
    checkRoomOneVsOneAvailability(socket: Socket, gameId: string): void;
    deleteCreatedOneVsOneRoom(socket: Socket, roomId: string): void;
    deleteCreatedCoopRoom(socket: Socket, roomId: string): void;
    getJoinedPlayerNames(socket: Socket, gameId: string): void;
    updateWaitingPlayerNameList(socket: Socket, playerPayLoad: PlayerData): void;
    refusePlayer(socket: Socket, playerPayLoad: PlayerData): void;
    acceptPlayer(socket: Socket, data: {
        gameId: string;
        roomId: string;
        playerName: string;
    }): void;
    checkIfPlayerNameIsAvailable(playerPayLoad: PlayerData): void;
    cancelJoining(socket: Socket, gameId: string): void;
    abandonGame(socket: Socket): Promise<void>;
    checkIfAnyCoopRoomExists(socket: Socket, playerPayLoad: PlayerData): void;
    sendMessage(socket: Socket, data: ChatMessage): void;
    gameCardDeleted(gameId: string): void;
    gameCardCreated(): void;
    resetTopTime(gameId: string): void;
    allGamesDeleted(): void;
    resetAllTopTime(): void;
    gameConstantsUpdated(): Promise<void>;
    gamesHistoryDeleted(): void;
    requestHint(socket: Socket): Promise<void>;
    processConnection(socket: Socket, name: string): void;
    processMessage(dataMessage: ChatMessageGlobal): void;
    afterInit(): void;
    handleConnection(socket: Socket): void;
    handleDisconnect(socket: Socket): Promise<void>;
}
