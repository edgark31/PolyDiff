import { GameService } from '@app/services/game/game.service';
import { HistoryService } from '@app/services/history/history.service';
import { MessageManagerService } from '@app/services/message-manager/message-manager.service';
import { Coordinate, GameRoom, Player, PlayerData } from '@common/game-interfaces';
import { OnModuleInit } from '@nestjs/common';
import * as io from 'socket.io';
export declare class RoomsManagerService implements OnModuleInit {
    private readonly gameService;
    private readonly messageManager;
    private readonly historyService;
    private gameConstants;
    private modeTimerMap;
    private rooms;
    constructor(gameService: GameService, messageManager: MessageManagerService, historyService: HistoryService);
    onModuleInit(): Promise<void>;
    createRoom(playerPayLoad: PlayerData): Promise<GameRoom>;
    getGameConstants(): Promise<void>;
    getRoomById(roomId: string): GameRoom;
    getRoomIdFromSocket(socket: io.Socket): string;
    getRoomByPlayerId(playerId: string): GameRoom;
    getHostIdByGameId(gameId: string): string;
    getCreatedCoopRoom(): GameRoom;
    addAcceptedPlayer(room: GameRoom, player: Player): void;
    updateRoom(room: GameRoom): void;
    deleteRoom(roomId: string): void;
    startGame(socket: io.Socket, server: io.Server): void;
    loadNextGame(room: GameRoom, playedGameIds: string[]): Promise<string>;
    validateCoords(socket: io.Socket, coords: Coordinate, server: io.Server): void;
    updateTimers(server: io.Server): void;
    addHintPenalty(socket: io.Socket, server: io.Server): Promise<void>;
    leaveRoom(room: GameRoom, server: io.Server): void;
    abandonGame(socket: io.Socket, server: io.Server): Promise<void>;
    handleSoloModesDisconnect(room: GameRoom, server: io.Server): Promise<void>;
    private differenceFound;
    private differenceNotFound;
    private handleCoopAbandon;
    private addBonusTime;
    private updateTimer;
    private countdownOver;
    private generateRoomId;
    private handleGamePageRefresh;
    private handleOneVsOneAbandon;
    private getOpponent;
    private buildClientGameVersion;
    private buildGameRoom;
    private isMultiplayerGame;
    private isLimitedModeGame;
}
